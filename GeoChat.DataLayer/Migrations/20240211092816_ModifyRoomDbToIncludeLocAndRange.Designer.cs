// <auto-generated />
using System;
using GeoChat.DataLayer.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GeoChat.DataLayer.Migrations
{
    [DbContext(typeof(GeoChatDBContext))]
    [Migration("20240211092816_ModifyRoomDbToIncludeLocAndRange")]
    partial class ModifyRoomDbToIncludeLocAndRange
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("GeoChat.DataLayer.Entities.Chat", b =>
                {
                    b.Property<Guid>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("TEXT");

                    b.Property<long>("SendTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ChatId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Chats");

                    b.HasData(
                        new
                        {
                            ChatId = new Guid("c0bc0ef8-5708-492f-aa49-da2d150e2835"),
                            Message = "Hi, I am your new agent.",
                            RoomId = new Guid("0d0b9a01-7246-4fb1-ac70-2f2c5d5f084b"),
                            SendTime = 1706942491L,
                            UserId = "agent1"
                        },
                        new
                        {
                            ChatId = new Guid("c68605be-7e12-4710-ae48-bf5d70c89868"),
                            Message = "Hi Okk ...",
                            RoomId = new Guid("0d0b9a01-7246-4fb1-ac70-2f2c5d5f084b"),
                            SendTime = 1706942611L,
                            UserId = "slave1"
                        },
                        new
                        {
                            ChatId = new Guid("e0bc032f-5728-484f-ad49-da2d150e5415"),
                            Message = "U have been declared a slave henceforth",
                            RoomId = new Guid("65958d08-4e33-40da-a0ac-54442fba0abe"),
                            SendTime = 1706882313L,
                            UserId = "sayan83"
                        },
                        new
                        {
                            ChatId = new Guid("d44facf9-d3f3-4f2b-baa0-15d62ed3d656"),
                            Message = "Ok Boss",
                            RoomId = new Guid("65958d08-4e33-40da-a0ac-54442fba0abe"),
                            SendTime = 1706882333L,
                            UserId = "slave1"
                        },
                        new
                        {
                            ChatId = new Guid("3362357a-2811-4100-9207-bf77e5b991ed"),
                            Message = "Good! Get me some whiskey",
                            RoomId = new Guid("65958d08-4e33-40da-a0ac-54442fba0abe"),
                            SendTime = 1706896187L,
                            UserId = "sayan83"
                        },
                        new
                        {
                            ChatId = new Guid("0b62f0c5-f566-4700-b122-9f852eedf07e"),
                            Message = "Toki for u boss ...",
                            RoomId = new Guid("65958d08-4e33-40da-a0ac-54442fba0abe"),
                            SendTime = 1706896238L,
                            UserId = "slave1"
                        });
                });

            modelBuilder.Entity("GeoChat.DataLayer.Entities.Room", b =>
                {
                    b.Property<Guid>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<int>("Range")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomId = new Guid("0d0b9a01-7246-4fb1-ac70-2f2c5d5f084b"),
                            Description = "My first room",
                            Latitude = 22.5869952,
                            Longitude = 88.439311099999998,
                            Range = 5000,
                            RoomName = "Room1",
                            UserId = "agent1"
                        },
                        new
                        {
                            RoomId = new Guid("65958d08-4e33-40da-a0ac-54442fba0abe"),
                            Description = "Private King room",
                            Latitude = 22.5869952,
                            Longitude = 88.439311099999998,
                            Range = 1000,
                            RoomName = "Kings Room",
                            UserId = "sayan83"
                        });
                });

            modelBuilder.Entity("GeoChat.DataLayer.Entities.RoomParticipant", b =>
                {
                    b.Property<Guid>("RoomId")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.HasKey("RoomId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Participants");

                    b.HasData(
                        new
                        {
                            RoomId = new Guid("65958d08-4e33-40da-a0ac-54442fba0abe"),
                            UserId = "sayan83"
                        },
                        new
                        {
                            RoomId = new Guid("65958d08-4e33-40da-a0ac-54442fba0abe"),
                            UserId = "slave1"
                        },
                        new
                        {
                            RoomId = new Guid("0d0b9a01-7246-4fb1-ac70-2f2c5d5f084b"),
                            UserId = "agent1"
                        },
                        new
                        {
                            RoomId = new Guid("0d0b9a01-7246-4fb1-ac70-2f2c5d5f084b"),
                            UserId = "slave1"
                        },
                        new
                        {
                            RoomId = new Guid("0d0b9a01-7246-4fb1-ac70-2f2c5d5f084b"),
                            UserId = "sayan83"
                        });
                });

            modelBuilder.Entity("GeoChat.DataLayer.Entities.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = "sayan83",
                            Name = "Sayantan",
                            Password = "sayantan"
                        },
                        new
                        {
                            UserId = "slave1",
                            Name = "Slave I Am",
                            Password = "slave"
                        },
                        new
                        {
                            UserId = "agent1",
                            Name = "Agent It Is",
                            Password = "agent"
                        });
                });

            modelBuilder.Entity("GeoChat.DataLayer.Entities.Chat", b =>
                {
                    b.HasOne("GeoChat.DataLayer.Entities.Room", "RoomRef")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeoChat.DataLayer.Entities.User", "SendBy")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomRef");

                    b.Navigation("SendBy");
                });

            modelBuilder.Entity("GeoChat.DataLayer.Entities.Room", b =>
                {
                    b.HasOne("GeoChat.DataLayer.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("GeoChat.DataLayer.Entities.RoomParticipant", b =>
                {
                    b.HasOne("GeoChat.DataLayer.Entities.Room", "RoomRef")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeoChat.DataLayer.Entities.User", "Participant")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("RoomRef");
                });
#pragma warning restore 612, 618
        }
    }
}
